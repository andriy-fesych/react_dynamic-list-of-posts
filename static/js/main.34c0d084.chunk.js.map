{"version":3,"sources":["components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setPost","selectedPost","className","map","onePost","userId","title","type","classNames","id","onClick","postId","API_URL","getUserPosts","fetch","then","res","json","catch","Response","Error","getPostDetails","getPostComments","postComment","comment","method","headers","body","JSON","stringify","ok","status","statusText","NewCommentForm","reloadComments","useState","name","email","data","setData","useEffect","updatedData","dataChangeHandler","event","target","value","a","placeholder","onChange","PostDetails","setSelectedPost","comments","setComments","comsVisibility","setComsVisibility","loaded","console","log","loadComments","comsFromServer","loadPost","deleteCommentHandler","commId","commentId","length","prevState","oneComment","App","loadedPosts","setLoadedPosts","setUserId","selectedPostId","setSelectedPostId","loadAllPosts","useCallback","userNumber","loadUserPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34c0d084.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  setPost: (arg0:string) => void,\n  selectedPost: string,\n}\n\nexport const PostsList: React.FC<Props>\n= ({ posts, setPost, selectedPost }) => {\n  const postClickHandler = (postId:string) => (\n    (postId === selectedPost)\n      ? setPost('')\n      : setPost(postId)\n  );\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map((onePost:Post) => (\n          <li className=\"PostsList__item\" key={onePost.id}>\n            <div>\n              <b>\n                [User #\n                {onePost.userId}\n                ]:&#160;\n              </b>\n              {onePost.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames('PostsList__button', 'button',\n                { 'special-close': selectedPost === onePost.id })}\n              onClick={() => postClickHandler(onePost.id)}\n            >\n              {(selectedPost !== onePost.id\n                ? 'Open'\n                : 'Close'\n              )}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Post } from '../types/post';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport function getUserPosts(userId: string): Promise<Post[]> {\n  return fetch(`${API_URL}/posts?userId=${userId}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport function getAllPosts(): Promise<Post[]> {\n  return fetch(`${API_URL}/posts`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport function getPostDetails(postId: string): Promise<Post> {\n  return fetch(`${API_URL}/posts/${postId}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\n// https://mate.academy/students-api/posts/:47\n","import { Comment } from '../types/comment';\nimport { CommentToPost } from '../types/comment-to-post';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport function getPostComments(postId: string): Promise<Comment[]> {\n  return fetch(`${API_URL}/comments?postId=${postId}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport function deleteComment(commentId: number) {\n  return fetch(`${API_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function postComment(comment: CommentToPost) {\n  return fetch(`${API_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  })\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport { CommentToPost } from '../../types/comment-to-post';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: string,\n  reloadComments: () => void,\n}\n\nexport const NewCommentForm: React.FC<Props>\n= ({ postId, reloadComments }) => {\n  const [data, setData] = useState<CommentToPost>({\n    postId: +postId,\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  useEffect(() => {\n    const updatedData = { ...data };\n\n    updatedData.postId = +postId;\n    setData(updatedData);\n  }, [postId]);\n\n  const dataChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedData = { ...data };\n\n    updatedData[event.target.name] = event.target.value;\n    setData(updatedData);\n  };\n\n  const textChangeHandler = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const updatedData = { ...data };\n\n    updatedData[event.target.name] = event.target.value;\n    setData(updatedData);\n  };\n\n  async function sendCommentToServer() {\n    await postComment(data)\n      .then(() => {\n        reloadComments();\n        setData({\n          postId: +postId,\n          name: '',\n          email: '',\n          body: '',\n        });\n      });\n  }\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={data.name}\n          onChange={dataChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={data.email}\n          onChange={dataChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={data.body}\n          onChange={textChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={sendCommentToServer}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport './PostDetails.scss';\nimport { Comment } from '../../types/comment';\n\ninterface Props {\n  postId: string;\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [comsVisibility, setComsVisibility] = useState<boolean>(true);\n\n  async function loadPost() {\n    try {\n      const loaded = await getPostDetails(postId);\n\n      setSelectedPost(loaded);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  }\n\n  async function loadComments() {\n    const comsFromServer = await getPostComments(postId);\n\n    setComments(comsFromServer);\n  }\n\n  useEffect(() => {\n    loadPost();\n    loadComments();\n  }, [postId]);\n\n  const comsVisTrigger = () => {\n    setComsVisibility(prevState => !prevState);\n  };\n\n  const deleteCommentHandler = async (commId: number) => {\n    await deleteComment(commId);\n    loadComments();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length === 0\n          ? null\n          : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={comsVisTrigger}\n            >\n              Hide&#160;\n              {comments.length}\n              &#160;comments\n            </button>\n          )}\n        {comsVisibility && (\n          <ul className=\"PostDetails__list\" data-cy=\"postList\">\n            {comments.map(oneComment => (\n              <li className=\"PostDetails__list-item\" key={oneComment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteCommentHandler(oneComment.id)}\n                >\n                  X\n                </button>\n                <p>{oneComment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            // eslint-disable-next-line react/jsx-no-bind\n            reloadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/post';\nimport { getUserPosts, getAllPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [loadedPosts, setLoadedPosts] = useState<Post[]>([]);\n  const [userId, setUserId] = useState<string>('0');\n  const [selectedPostId, setSelectedPostId] = useState<string>('');\n\n  const loadAllPosts = useCallback(\n    async () => {\n      const loaded = await getAllPosts();\n\n      setLoadedPosts(loaded);\n    },\n    [],\n  );\n\n  async function loadUserPosts(userNumber:string) {\n    const loaded = await getUserPosts(userNumber);\n\n    setLoadedPosts(loaded);\n  }\n\n  useEffect(() => {\n    if (userId !== '0') {\n      loadUserPosts(userId);\n    } else {\n      loadAllPosts();\n    }\n  }, [userId]);\n\n  const changeUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={changeUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={loadedPosts}\n            setPost={setSelectedPostId}\n            selectedPost={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}